{{- range $endpoint := .Values.endpoints }}
{{- range $model := $endpoint.models }}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "openai-monitor.fullname" $ }}-{{ $endpoint.name }}-{{ $model.name }}
  labels:
    {{- include "openai-monitor.labels" $ | nindent 4 }}
    endpoint: {{ $endpoint.name }}
    model: {{ $model.model-name }}
spec:
  schedule: {{ $.Values.cronJob.schedule | quote }}
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{- include "openai-monitor.selectorLabels" $ | nindent 12 }}
            endpoint: {{ $endpoint.name }}
            model: {{ $model.model-name }}
        spec:
          containers:
          - name: monitor
            image: {{ $.Values.cronJob.image.repository }}:{{ $.Values.cronJob.image.tag }}
            imagePullPolicy: {{ $.Values.cronJob.image.pullPolicy }}
            command:
            - /bin/sh
            - -c
            - |
              # Signal job start
              SERIES_ID=$(date +%s)-$$
              echo "Starting job with series ID: $SERIES_ID"
              echo "Sending start ping to Cronitor"
              curl -s "$CRONITOR_BASE_URL/$MONITOR_NAME?state=run&series=$SERIES_ID&env={{ $.Values.global.env | default "production" }}&host=$(hostname)" > /dev/null
              
              # Set up timeout handler
              timeout 1m sh -c '
              {{- if eq $model.type "chat" }}
              RESPONSE=$(curl -s -w "%{http_code}" -X POST "$SERVER_URL/v1/chat/completions" \
                -H "Content-Type: application/json" \
                -d "{\"model\":\"{{ $model.model-name }}\",\"messages\":[{\"role\":\"user\",\"content\":\"test\"}],\"max_tokens\":1}")
              {{- else if eq $model.type "embedding" }}
              RESPONSE=$(curl -s -w "%{http_code}" -X POST "$SERVER_URL/v1/embeddings" \
                -H "Content-Type: application/json" \
                -d "{\"model\":\"{{ $model.model-name }}\",\"input\":\"test\"}")
              {{- end }}
              HTTP_CODE=$(echo "$RESPONSE" | tail -c 4)
              BODY=$(echo "$RESPONSE" | head -c -4)
              echo "Response body: $BODY"
              if [ "$HTTP_CODE" = "200" ]; then
                echo "Sending success ping to Cronitor"
                curl -s "$CRONITOR_BASE_URL/$MONITOR_NAME?state=complete&series=$SERIES_ID&status_code=0&env={{ $.Values.global.env | default "production" }}&host=$(hostname)" > /dev/null
                echo "SUCCESS: {{ $endpoint.name }}/{{ $model.model-name }} responded successfully"
                exit 0
              else
                echo "Sending failure ping to Cronitor"
                curl -s "$CRONITOR_BASE_URL/$MONITOR_NAME?state=fail&series=$SERIES_ID&status_code=$HTTP_CODE&env={{ $.Values.global.env | default "production" }}&host=$(hostname)" > /dev/null
                echo "FAILURE: {{ $endpoint.name }}/{{ $model.model-name }} failed with HTTP $HTTP_CODE"
                exit 1
              fi
              '
              
              # Handle timeout case
              if [ $? -eq 124 ]; then
                echo "Sending timeout ping to Cronitor"
                curl -s "$CRONITOR_BASE_URL/$MONITOR_NAME?state=fail&series=$SERIES_ID&status_code=124&message=Request%20timeout&env={{ $.Values.global.env | default "production" }}&host=$(hostname)" > /dev/null
                echo "TIMEOUT: {{ $endpoint.name }}/{{ $model.model-name }} request timed out after 1m"
                exit 124
              fi
            env:
            - name: SERVER_URL
              value: {{ $endpoint.url | quote }}
            - name: CRONITOR_BASE_URL
              {{- toYaml $.Values.telemetry.url | nindent 14 }}
            - name: MONITOR_NAME
              value: {{ $model.monitor | default (printf "%s-%s" $endpoint.name $model.model-name) | quote }}
            {{- with $.Values.cronJob.resources }}
            resources:
              {{- toYaml . | nindent 14 }}
            {{- end }}
          restartPolicy: {{ $.Values.cronJob.restartPolicy }}
{{- end }}
{{- end }}
